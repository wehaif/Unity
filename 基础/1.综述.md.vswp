vnote_backup_file_826537664 E:/TA/TA/基础/1.渲染流水线.md
## 2.1 什么是渲染流水线

渲染流水线的主要工作在于由一个三维场景出发，渲染一张二维图像，此工作由CPU和GPU共同完成，

渲染流程分为三个阶段：**应用阶段、几何阶段，光栅化阶段**，这个划分方式只是概念性的划分，每个阶段通常本身也是一个流水线系统，即包含子流水线。

* **应用阶段**
此阶段由开发者主导，主要进行三部分准备：首先准备场景数据（摄像机位置、视椎体、场景模型、光源等），其次是粗粒度剔除把不可见的物体剔除出去，提高渲染性能。最后要设置每个模型的渲染状态（材质、纹理、使用的 Shader 等），然后传递**渲染图元**给几何阶段

* **几何阶段**
几何阶段主要负责和每个渲染图元交互，把顶点坐标变换到屏幕空间中去再交给光栅器进行处理。通过对图元的多部处理后，输出二维顶点坐标，每个顶点对应的深度值，着色等相关信息并传递给下一阶段。这一阶段可以分为更小的流水线阶段，下文会说到

* **光栅化阶段**
这一阶段将会使用上一阶段传递的数据来产生屏幕上的像素，并渲染出最终的图像。此阶段在GPU上进行。它也包含子流水线

![未命名文件 (5)](_v_images/20210226134652696_8095.png)


## 2.2 CPU和GPU的通信

渲染流水线的起点是CPU，即应用阶段，大致可以分为以下部分：

1. 把数据加载到显存中
2. 设置渲染状态
3. 调用 Draw Call

### 把数据加载到显存

所有渲染所需的数据都需要从硬盘（Hard Disk Drive，HDD）加载到系统内存（Random Access Memory，RAM）中，然后网格和纹理等数据又被加载到显卡的存储空间：显存（VRAM）中，这是因为显卡对自身显存的访问速度更快。且大多数显卡对于内存没有直接访问权利。

### 设置渲染状态
通过CPU设置渲染状态，从而 "指导" GPU如何进行渲染。而什么又是渲染状态呢？简单来说就是这些状态定义了场景中的网格是怎么被渲染的。例如：使用哪个顶点着色器/片元着色器、光源属性、材质等这些属性合称渲染状态。如果没有更改渲染状态，那么所有网格都将使用同一种渲染状态

### 调用 Draw Call
这就是一个命令，发起方是 CPU 接受方是 GPU，**这个命令会指向一个需要被渲染的图元列表**，而不会包含任何材质信息。

当 GPU 接受到 Draw Call 指令时就会根据渲染状态（着色器、纹理、材质等）和所有的顶点数据来进行计算，最终输出屏幕上显示的那些漂亮的像素。


## 2.3 GPU流水线

在2.2节介绍了 CPU 和 GPU 如何通信，并调用 Draw Call 命令 GPU 进行渲染。GPU的渲染过程就是 GPU 流水线

接下来将介绍概念阶段的后两个阶段，即：几何阶段和光栅化阶段。他们又可以分为若干更小的流水线阶段。每个阶段又有不同的可配置和可编程性

![未命名文件](_v_images/20210226161841294_26333.png =970x)

顶点数据是由应用阶段加载到显存中，再有 Draw Call 指定的。这些数据随后被传递给顶点着色器

### 顶点着色器

顶点着色器（Vertex Shader）是流水线的开头，它的输入来自于 CPU 。主要实现：坐标变换，逐顶点着色，为后续阶段输出所需的数据等功能，处理单位是顶点，每个顶点都会调用一次顶点着色器，顶点着色器无法创建或销毁顶点， 也无法得知顶点与顶点之间的关系，例如：我们无法得知两个顶点是否属于同一网格。

坐标变换。就是对顶点的坐标( 位置 )进行变换，顶点着色器可以在这一步改变顶点的位置，一个顶点着色器最基本的功能就是<font color="#d0000">将一个顶点从模型空间转换到齐次裁剪空间</font>，在顶点着色器中会看到类似下面的代码

```shader
o.pos = mul(UNNITY_MVP,v.position);
```
转换到齐次裁剪空间之后，再由硬件做透视除法后，最终得到归一化的设备坐标（NDC）
> 在OpenGL中使用的 NDC 它的z分量 在[-1,1]之间，而 DirectX 中，NDC的z分量范围是[0,1]


### 裁剪
裁剪是为了处理那些不在摄像机视野范围内的物体。

一个图元和摄像机视野的关系有三种：完全在视野内、部分在视野内、完全在视野外；完全在视野内的图元需要传递给下流水线阶段，完全在视野外的不需要被渲染，而部分在视野内的图元需要进行处理。这就是裁剪，原来视野外部的顶点将会被舍弃，生成新的顶点在图元和视野边界的交界处

### 屏幕映射
屏幕映射的功能是将每个图元的顶点位置（ x和y的坐标 ）转换到屏幕坐标系，屏幕坐标系是一个二维坐标系，屏幕映射得到的屏幕坐标决定了这个顶点对应屏幕上的哪个像素，以及距离这个像素有多远。

需要注意的是OpenGL和DriectX之间的差异问题。OpenGL把屏幕左下角当成最小的窗口坐标值，而DirectX把屏幕左上角定义为最小坐标值。

![未命名文件 (1)](_v_images/20210226174937864_19622.png)


### 三角形设置
接下来就进入到了光栅化阶段，光栅化有两个最重要的目标：计算每个图元覆盖了那些像素，为这些像素计算他们的颜色。

三角形设置主要用来计算光栅化一个三角网格所需的信息，意思就是：上一阶段输出的是三角网格的顶点坐标，但是为了得到三角网格对像素的覆盖情况，每条边上的像素坐标，这个计算三角网格表示数据的过程就叫做三角形设置。它的输出是为了下一个阶段做准备。

### 三角形遍历
三角形遍历阶段根据上一阶段传入的三角网格信息，检查每个像素是否被三角网格覆盖，并使用三角网格的三个顶点信息对整个覆盖区域的像素进行**差值**，这个计算的过程就叫做三角形遍历，也称为：**扫描变化**。

这一步输出的就是一个片元序列，该序列并不是真正意义上的像素，而是多状态的集合，这些状态用于计算最终的颜色，包括：屏幕坐标、深度信息、以及从几何阶段的信息：法线、纹理等信息。


### 片元着色器

此阶段为另一个非常重要的可编程阶段，在DirectX中被称为：像素着色器。这一阶段可以完成很多重要的渲染技术，其中最重要的技术之一就是：纹理采样。

为了完成纹理采样通常会在几何阶段的顶点着色器中输出每个顶点对应的纹理坐标，然后在经过光栅化阶段对三角网格的三个顶点坐标进行差值后，就可以得到三角网格所覆盖的片元的纹理坐标了。

### 逐片元操作
这是渲染流水线的最后一步了，在OpenGL中被称为：逐片元操作；而在DirectX中被称为：输出合并阶段。有以下几个比较重要的任务

1. 测试任务：逐片元进行深度测试、模板测试等，以决定片元的可见性
2. 混合任务：如果一个片元通过了测试，那么就需要把这个片元的颜色值和颜色缓冲区中的颜色进行合并(混合)

此阶段具有超高的配置性，可以设置每一步的操作细节。下图简化了逐片元操作流程：
